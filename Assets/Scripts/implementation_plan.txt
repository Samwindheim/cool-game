
# 🧠 Implementation Plan — Top-Down Air Hockey (URP 3D)

**Goal:**
Create a 3D air hockey game viewed from above using Unity’s URP. Gameplay is 2D-style (X–Z plane), but with 3D objects, lighting, and URP materials for a polished look.

---

## 📦 PHASE 1 — Project Setup

### ✅ 1. Create URP Project

* Create a new Unity project → **3D (URP)** template.
* Name it `AirHockey3D_URP`.

### ✅ 2. Folder Structure

Create this structure in `Assets/`:

```
Audio/
Materials/
Prefabs/
Scenes/
Scripts/
Models/
Textures/
UI/
VFX/
```

### ✅ 3. Scene Setup

**Scene:** `MainScene`

Scene objects:

```
Directional Light
Main Camera
Table (Plane)
Walls (4 cubes)
Goals (2 cubes with trigger colliders)
Player1 (Cylinder)
Player2 (Cylinder)
Puck (Cylinder)
GameManager (empty)
Canvas (UI)
```

---

## 🧩 PHASE 2 — Core Mechanics

### ✅ 4. Player Controller (3D Physics)

Each paddle is a 3D object (e.g., a cylinder).
Movement is restricted to X–Z plane.

**Script:** `PlayerController.cs`

```csharp
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    public float moveSpeed = 10f;
    public float dashForce = 20f;
    public float dashCooldown = 2f;
    private bool canDash = true;
    private Rigidbody rb;
    private Vector3 inputDir;

    [SerializeField] private string horizontalAxis = "Horizontal";
    [SerializeField] private string verticalAxis = "Vertical";
    [SerializeField] private KeyCode dashKey = KeyCode.Space;

    void Start() => rb = GetComponent<Rigidbody>();

    void Update()
    {
        inputDir = new Vector3(Input.GetAxisRaw(horizontalAxis), 0, Input.GetAxisRaw(verticalAxis));

        if (Input.GetKeyDown(dashKey) && canDash)
            StartCoroutine(Dash());
    }

    void FixedUpdate()
    {
        Vector3 move = inputDir.normalized * moveSpeed;
        rb.velocity = new Vector3(move.x, rb.velocity.y, move.z);
    }

    private System.Collections.IEnumerator Dash()
    {
        canDash = false;
        rb.AddForce(inputDir.normalized * dashForce, ForceMode.Impulse);
        yield return new WaitForSeconds(dashCooldown);
        canDash = true;
    }
}
```

**Notes:**

* Player 1 uses WASD.
* Player 2 uses arrow keys.
* Freeze `Y Position` and `X/Z Rotation` in Rigidbody constraints.

---

### ✅ 5. Puck Controller

The puck moves freely on the X–Z plane, bouncing off paddles and walls.

**Script:** `PuckController.cs`

```csharp
using UnityEngine;

public class PuckController : MonoBehaviour
{
    private Rigidbody rb;
    private Vector3 startPos;

    void Start()
    {
        rb = GetComponent<Rigidbody>();
        startPos = transform.position;
    }

    public void ResetPuck()
    {
        rb.velocity = Vector3.zero;
        rb.angularVelocity = Vector3.zero;
        transform.position = startPos;
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("GoalLeft"))
            GameManager.Instance.AddScore(2);
        else if (other.CompareTag("GoalRight"))
            GameManager.Instance.AddScore(1);
    }
}
```

---

### ✅ 6. Game Manager

Handles scores, win condition, and puck resets.

**Script:** `GameManager.cs`

```csharp
using UnityEngine;
using TMPro;

public class GameManager : MonoBehaviour
{
    public static GameManager Instance;

    public int player1Score, player2Score;
    public TextMeshProUGUI scoreTextP1, scoreTextP2;
    public GameObject winPanel;
    public PuckController puck;
    public int winScore = 5;

    void Awake() => Instance = this;

    public void AddScore(int player)
    {
        if (player == 1) player1Score++;
        else player2Score++;

        UpdateScoreUI();

        if (player1Score >= winScore || player2Score >= winScore)
            EndGame();
        else
            puck.ResetPuck();
    }

    void UpdateScoreUI()
    {
        scoreTextP1.text = player1Score.ToString();
        scoreTextP2.text = player2Score.ToString();
    }

    void EndGame()
    {
        Time.timeScale = 0;
        winPanel.SetActive(true);
    }
}
```

---

## 🔊 PHASE 3 — Feedback Systems (Audio + VFX)

### ✅ 7. Audio

**Sounds:**

* `hit.wav` → when puck hits paddle/wall.
* `goal.wav` → when a goal is scored.
* `bgMusic.mp3` → background loop.

**Script:** `AudioManager.cs`

```csharp
using UnityEngine;

public class AudioManager : MonoBehaviour
{
    public static AudioManager Instance;
    public AudioSource hitSound, goalSound, bgMusic;

    void Awake()
    {
        Instance = this;
        bgMusic.Play();
    }

    public void PlayHit() => hitSound.Play();
    public void PlayGoal() => goalSound.Play();
}
```

Call `AudioManager.Instance.PlayHit();` inside collision events (e.g., in `PuckController` or paddle).

---

### ✅ 8. VFX

* **PuckHitEffect:** small spark prefab (trigger on collision).
* **GoalFlash:** light flare near goal when scored.
  You can make both with **URP particle systems**.

---

## 🧠 PHASE 4 — Gameplay & AI (Optional for 3 pts in “Complex Mechanics”)

### ✅ 9. AI Controller (Optional)

**Script:** `AIController.cs`

```csharp
using UnityEngine;

public class AIController : MonoBehaviour
{
    public Transform puck;
    public float moveSpeed = 8f;
    private Rigidbody rb;

    void Start() => rb = GetComponent<Rigidbody>();

    void FixedUpdate()
    {
        Vector3 target = new Vector3(puck.position.x, transform.position.y, puck.position.z);
        Vector3 dir = (target - transform.position).normalized;
        rb.velocity = new Vector3(dir.x, 0, dir.z) * moveSpeed;
    }
}
```

Assign this to Player 2 for single-player mode.

---

## 🖥️ PHASE 5 — UI & Menus

### ✅ 10. UIManager.cs

Handles start/pause/win menus and score updates.

**Script:** `UIManager.cs`

```csharp
using UnityEngine;

public class UIManager : MonoBehaviour
{
    public GameObject pauseMenu;

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.Escape))
            TogglePause();
    }

    public void TogglePause()
    {
        bool isPaused = Time.timeScale == 0;
        Time.timeScale = isPaused ? 1 : 0;
        pauseMenu.SetActive(!isPaused);
    }

    public void RestartGame() => UnityEngine.SceneManagement.SceneManager.LoadScene(0);
}
```

---

## 💡 PHASE 6 — Visual Polish (URP Features)

| Element             | Effect           | How                                                                          |
| ------------------- | ---------------- | ---------------------------------------------------------------------------- |
| **Lighting**        | Soft top light   | One Directional Light, intensity ~1.0                                        |
| **Materials**       | Reflective table | URP/Lit, smoothness 0.9, metallic 0.3                                        |
| **Puck glow**       | Emission map     | URP/Lit, enable Emission                                                     |
| **Post-processing** | Bloom, Vignette  | Add Global Volume with URP effects                                           |
| **Camera**          | Slight tilt      | Position (0, 10, 0), rotation (90, 0, 0) or (80, 0, 0) for perspective depth |

---

## 📦 PHASE 7 — Organization & Build

### ✅ 11. Folder Cleanup

```
Assets/
├── Audio/
├── Materials/
├── Prefabs/
├── Scenes/
├── Scripts/
├── Textures/
├── UI/
└── VFX/
```

### ✅ 12. Build for WebGL

* File → Build Settings → WebGL → Build.
* Test locally.
* Upload to itch.io → mark “play in browser.”

---

## 🌐 PHASE 8 — Optional Polish Ideas

These are great for bonus complexity or a portfolio-ready game:

* Use **URP reflections** for glossy rink.

---

## ✅ Summary (How You’ll Hit Full Points)

| Criterion         | Plan                                        |
| ----------------- | ------------------------------------------- |
| Player Controller | Dash & smooth Rigidbody control             |
| Colliders         | Physics-based collisions & goal triggers    |
| Audio / VFX       | Hit/goal sounds + particle sparks           |
| Mechanics         | Scoring, win condition, optional AI         |
| UI                | Score HUD + pause/restart menu              |
| Code              | Structured, commented C# scripts            |
| Project           | Clean folders, consistent names             |
| Itch.io           | WebGL upload with screenshots & description |

---

